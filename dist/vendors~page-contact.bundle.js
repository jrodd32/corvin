(window["webpackJsonp"] = window["webpackJsonp"] || []).push([["vendors~page-contact"],{

/***/ "./node_modules/@bit/doeanderson.components.core.forms/dist/forms.js":
/*!***************************************************************************!*\
  !*** ./node_modules/@bit/doeanderson.components.core.forms/dist/forms.js ***!
  \***************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.formSectionProps = exports.formProps = exports.valueChangedProps = void 0;\n\nvar _utilities = __webpack_require__(/*! ./utilities */ \"./node_modules/@bit/doeanderson.components.core.forms/dist/utilities.js\");\n\n/**\n * @name forms\n * @description Mixins for validating forms and listening to form input events\n */\n\n/**\n * @name valueChangedProps\n * @description Mixin for listening to value-changed events from eventBus\n */\nvar valueChangedProps = {\n  data: function data() {\n    return {\n      /**\n       * @member {boolean} hasValueChangedListener Component is listening for event bus events\n       */\n      hasValueChangedListener: false\n    };\n  },\n  mounted: function mounted() {\n    this.baseForm = this.$children.find(function (child) {\n      return child && child.$options.name === 'BaseForm';\n    });\n    this.addValueChangedListener();\n  },\n  activated: function activated() {\n    this.addValueChangedListener();\n  },\n  deactivated: function deactivated() {\n    this.removeValueChangedListener();\n  },\n  beforeDestroy: function beforeDestroy() {\n    this.removeValueChangedListener();\n  },\n  methods: {\n    /**\n     * @function\n     * @name addValueChangedListener\n     * @description Adds eventBus listener if it doesn't exist\n     * @returns {void}\n     */\n    addValueChangedListener: function addValueChangedListener() {\n      var _this = this;\n\n      if (this.hasValueChangedListener) {\n        return;\n      }\n\n      this.$eventBus.$on('value-changed', function (formId) {\n        if (formId !== _this._uid) {\n          return;\n        }\n\n        _this.handleValueChanged();\n      });\n      this.hasValueChangedListener = true;\n    },\n\n    /**\n     * @function\n     * @name removeValueChangedListener\n     * @description Removes eventBus listener\n     * @returns {void}\n     */\n    removeValueChangedListener: function removeValueChangedListener() {\n      this.hasValueChangedListener = false;\n      this.$eventBus.$off('value-changed');\n    }\n  }\n};\n/**\n * @name formProps\n * @description Mixin for turning component into a dyanmic form\n */\n\nexports.valueChangedProps = valueChangedProps;\nvar formProps = {\n  mixins: [valueChangedProps],\n  data: function data() {\n    return {\n      /**\n       * @member {null|VueComponent} baseForm Parent component of the form fields\n       */\n      baseForm: null,\n\n      /**\n       * @member {boolean} isSubmitting Whether the form is actively submitting\n       */\n      isSubmitting: false,\n\n      /**\n       * @member {boolean} isValid Whether the form is fully validated\n       */\n      isValid: false,\n\n      /**\n       * @member {object} matchingFields Object containing fields to validate matched values where the key is one field and the value is the other field\n       */\n      matchingFields: {},\n\n      /**\n       * @member {object} notification Object containing DoeNotification props\n       */\n      notification: null,\n\n      /**\n       * @member {string} randomId Random string for causing computed methods to update\n       */\n      randomId: (0, _utilities.randomId)(),\n\n      /**\n       * @member {string} submitButton Default text for form submit button\n       */\n      submitButton: 'Submit'\n    };\n  },\n  computed: {\n    /**\n     * @function\n     * @name canSubmit\n     * @returns {boolean} If the form can submit based on valid fields and required fields being filled in\n     */\n    canSubmit: function canSubmit() {\n      return this.hasValidFields && this.requiredFieldsCount === this.validatedFieldsCount;\n    },\n\n    /**\n     * @function\n     * @name fields\n     * @returns {array} The field components within the form\n     */\n    fields: function fields() {\n      if (this.randomId.length === 0 || this.baseForm === null) {\n        return [];\n      }\n\n      var fields = (0, _utilities.findComponents)(this.baseForm, [], 'DoeInput');\n      fields = (0, _utilities.findComponents)(this.baseForm, fields, 'DoeSelect');\n      fields = (0, _utilities.findComponents)(this.baseForm, fields, 'DoeRadio');\n      fields = (0, _utilities.findComponents)(this.baseForm, fields, 'DoeCheckbox');\n      fields = (0, _utilities.findComponents)(this.baseForm, fields, 'DoeDatePicker');\n      fields = (0, _utilities.findComponents)(this.baseForm, fields, 'DoeFileInput');\n      return fields;\n    },\n\n    /**\n     * @function\n     * @name fieldKeys\n     * @returns {array} The keys of the field components within the form\n     */\n    fieldKeys: function fieldKeys() {\n      // field.field returns the field_name prop passed\n      return this.fields.map(function (field) {\n        return field.field;\n      });\n    },\n\n    /**\n     * @function\n     * @name hasConfirmFields\n     * @returns {boolean} If the form has confirm fields to be matched\n     */\n    hasConfirmFields: function hasConfirmFields() {\n      return this.fieldKeys.some(function (key) {\n        return key.endsWith('_confirmation');\n      });\n    },\n\n    /**\n     * @function\n     * @name hasMatchingFields\n     * @returns {boolean} If the form has fields to be matched\n     */\n    hasMatchingFields: function hasMatchingFields() {\n      return this.matchingFields && Object.keys(this.matchingFields).length > 0;\n    },\n\n    /**\n     * @function\n     * @name hasValidFields\n     * @returns {boolean} If the form contains any fields that are invalid\n     */\n    hasValidFields: function hasValidFields() {\n      return this.fields.filter(function (field) {\n        return field.isInvalid;\n      }).length === 0;\n    },\n\n    /**\n     * @function\n     * @name isDisabled\n     * @returns {boolean} When it's invalid or actively submitting\n     */\n    isDisabled: function isDisabled() {\n      return !this.isValid || this.isSubmitting;\n    },\n\n    /**\n     * @function\n     * @name requiredFields\n     * @returns {array} Fields marked as required\n     */\n    requiredFields: function requiredFields() {\n      return this.fields.filter(function (field) {\n        return field.required === true;\n      });\n    },\n\n    /**\n     * @function\n     * @name requiredFields\n     * @returns {number} The number of required fields\n     */\n    requiredFieldsCount: function requiredFieldsCount() {\n      return this.requiredFields.length;\n    },\n\n    /**\n     * @function\n     * @name submitButtonText\n     * @returns {string} The submit button text\n     */\n    submitButtonText: function submitButtonText() {\n      return this.isSubmitting ? 'Please wait...' : this.submitButton;\n    },\n\n    /**\n     * @function\n     * @name validatedFields\n     * @returns {array} Fields that have passed validation\n     */\n    validatedFields: function validatedFields() {\n      return this.requiredFields.filter(function (field) {\n        return field.validated === true;\n      });\n    },\n\n    /**\n     * @function\n     * @name validatedFieldsCount\n     * @returns {number} The number of validated fields\n     */\n    validatedFieldsCount: function validatedFieldsCount() {\n      return this.validatedFields.length;\n    }\n  },\n  mounted: function mounted() {\n    this.baseForm = this.$children.find(function (child) {\n      return child && child.$options.name === 'BaseForm';\n    });\n    this.checkValidation();\n  },\n  methods: {\n    /**\n     * @function\n     * @name checkValidation\n     * @description Checks if all fields have been validated (`canSubmit`)\n     * @returns {void}\n     */\n    checkValidation: function checkValidation() {\n      var _this2 = this;\n\n      this.$nextTick(function () {\n        // validate fields that have a matching field that ends with _confirmation\n        if (_this2.fields && _this2.hasConfirmFields) {\n          _this2.fieldKeys.forEach(function (key) {\n            if (!key.endsWith('_confirmation')) {\n              return;\n            }\n\n            var baseField = _this2.findField(key.replace('_confirmation', ''));\n\n            if (!baseField) {\n              return;\n            }\n\n            var targetField = _this2.findField(key);\n\n            if (baseField.value !== targetField.value) {\n              targetField.setError(\"Must match \".concat(baseField.humanName));\n            }\n          });\n        } // validate fields from matchingFields via key/value pairs\n\n\n        if (_this2.fields && _this2.hasMatchingFields) {\n          Object.keys(_this2.matchingFields).forEach(function (key) {\n            var baseField = _this2.findField(key);\n\n            var targetField = _this2.findField(_this2.matchingFields[key]);\n\n            if (baseField.value !== targetField.value) {\n              targetField.setError(\"Must match \".concat(baseField.humanName));\n            }\n          });\n        }\n\n        _this2.isValid = _this2.runExtraValidations() && _this2.canSubmit;\n      });\n    },\n\n    /**\n     * @function\n     * @name findField\n     * @param {string} key The field name to look for\n     * @returns {object} Field with matching key\n     */\n    findField: function findField(key) {\n      return this.fields.find(function (field) {\n        return field.field === key;\n      });\n    },\n\n    /**\n     * @function\n     * @name handleFormClose\n     * @description Reset notification to default\n     * @returns {void}\n     */\n    handleFormClose: function handleFormClose() {\n      this.notification = null;\n    },\n\n    /**\n     * @function\n     * @name handleValueChanged\n     * @description Listener callback for when child components values change\n     * @returns {void}\n     */\n    handleValueChanged: function handleValueChanged() {\n      this.checkValidation();\n    },\n\n    /**\n     * @function\n     * @name resetFields\n     * @description Calls resetField on every field\n     * @returns {void}\n     */\n    resetFields: function resetFields() {\n      this.fields.map(function (field) {\n        return field.resetField();\n      });\n    },\n\n    /**\n     * @function\n     * @name setErrors\n     * @description Sets error message on each field that has a matching message in the `errors` param\n     * @param {object} errors An object containing error messages by field\n     * @returns {void}\n     */\n    setErrors: function setErrors() {\n      var _this3 = this;\n\n      var errors = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n      if (errors && Object.keys(errors).length > 0) {\n        this.fieldKeys.forEach(function (key) {\n          if (errors[key]) {\n            _this3.findField(key).setError(errors[key].join(', '));\n          }\n        });\n      }\n    },\n\n    /**\n     * @function\n     * @name getFormData\n     * @returns {object} Values from each field\n     */\n    getFormData: function getFormData() {\n      var formData = {}; // add component-based fields\n\n      this.fields.forEach(function (field) {\n        // skip radios/checkboxes if not checked\n        if ((field.radio || field.checkbox) && !field.isChecked) {\n          return;\n        } // field.field returns the field_name prop\n        // field.value returns current field value\n\n\n        formData[field.field] = field.value;\n      });\n      return formData;\n    },\n\n    /**\n     * @function\n     * @name refreshFieldList\n     * @description Updates the stored randomId to a new value so that the fields computed method updates\n     * @returns {void}\n     */\n    refreshFieldList: function refreshFieldList() {\n      this.randomId = (0, _utilities.randomId)();\n    },\n\n    /**\n     * @function\n     * @name runExtraValidations\n     * @description Method for adding custom validations per component\n     * @returns {boolean} Form is valid or not\n     */\n    runExtraValidations: function runExtraValidations() {\n      return true;\n    }\n  }\n};\n/**\n * @name formSectionProps\n * @description Mixin for sectioning form into stepped parts\n */\n\nexports.formProps = formProps;\nvar formSectionProps = {\n  mixins: [formProps, valueChangedProps],\n  data: function data() {\n    return {\n      /**\n       * @member {number} currentSection Index of the active section\n       */\n      currentSection: 0,\n\n      /**\n       * @member {object} fieldsBySection Groups of fields where section index is the key\n       */\n      fieldsBySection: {},\n\n      /**\n       * @member {array} sections Group of section components\n       */\n      sections: [],\n\n      /**\n       * @member {object} sectionMatchingFields Object containing fields to validate matched values where the key is one field and the value is the other field\n       */\n      sectionMatchingFields: {},\n\n      /**\n       * @member {boolean} sectionValud Whether the section is validated\n       */\n      sectionValid: false\n    };\n  },\n  computed: {\n    /**\n     * @function\n     * @name canSubmitSection\n     * @returns {boolean} If the section can submit based on valid fields and required fields being filled in\n     */\n    canSubmitSection: function canSubmitSection() {\n      return this.sectionHasValidFields && this.sectionRequiredFieldsCount === this.sectionValidatedFieldsCount;\n    },\n\n    /**\n     * @function\n     * @name isSectionDisabled\n     * @returns {boolean} When it's invalid or actively submitting\n     */\n    isSectionDisabled: function isSectionDisabled() {\n      return !this.sectionValid;\n    },\n\n    /**\n     * @function\n     * @name sectionHasConfirmFields\n     * @returns {boolean} If the section has confirm fields to be matched\n     */\n    sectionHasConfirmFields: function sectionHasConfirmFields() {\n      return this.sectionFieldKeys.some(function (key) {\n        return key.endsWith('_confirmation');\n      });\n    },\n\n    /**\n     * @function\n     * @name sectionHasMatchingFields\n     * @returns {boolean} If the section has fields to be matched\n     */\n    sectionHasMatchingFields: function sectionHasMatchingFields() {\n      return this.sectionMatchingFields && Object.keys(this.sectionMatchingFields).length > 0;\n    },\n\n    /**\n     * @function\n     * @name sectionHasValidFields\n     * @returns {boolean} If the section contains any fields that are invalid\n     */\n    sectionHasValidFields: function sectionHasValidFields() {\n      return this.fields.filter(function (field) {\n        return field.isInvalid;\n      }).length === 0;\n    },\n\n    /**\n     * @function\n     * @name sectionFields\n     * @returns {array} The field components within the section\n     */\n    sectionFields: function sectionFields() {\n      return Object.keys(this.fieldsBySection).length > 0 ? this.fieldsBySection[this.currentSection] : [];\n    },\n\n    /**\n     * @function\n     * @name sectionFieldKeys\n     * @returns {array} The keys of the field components within the section\n     */\n    sectionFieldKeys: function sectionFieldKeys() {\n      // field.field returns the field_name prop passed\n      return this.sectionFields.map(function (field) {\n        return field.field;\n      });\n    },\n\n    /**\n     * @function\n     * @name sectionRequiredFields\n     * @returns {array} Fields marked as required\n     */\n    sectionRequiredFields: function sectionRequiredFields() {\n      return this.sectionFields.filter(function (field) {\n        return field.required === true;\n      });\n    },\n\n    /**\n     * @function\n     * @name sectioRequiredFields\n     * @returns {number} The number of required fields\n     */\n    sectionRequiredFieldsCount: function sectionRequiredFieldsCount() {\n      return this.sectionRequiredFields.length;\n    },\n\n    /**\n     * @function\n     * @name sectionValidatedFields\n     * @returns {array} Fields that have passed validation\n     */\n    sectionValidatedFields: function sectionValidatedFields() {\n      return this.sectionRequiredFields.filter(function (field) {\n        return field.validated === true;\n      });\n    },\n\n    /**\n     * @function\n     * @name sectionValidatedFieldsCount\n     * @returns {number} The number of validated fields\n     */\n    sectionValidatedFieldsCount: function sectionValidatedFieldsCount() {\n      return this.sectionValidatedFields.length;\n    }\n  },\n  mounted: function mounted() {\n    this.sections = this.baseForm.$children.filter(function (child) {\n      return child && child.$options.name === 'BaseFormSection';\n    });\n    this.fieldsBySection = this.setSectionFields();\n\n    if (this.sections.length) {\n      this.sections[this.currentSection].isActive = true;\n    }\n\n    this.checkSectionValidation();\n  },\n  methods: {\n    /**\n     * @function\n     * @name beforeNextSection\n     * @note Here to be overrriden in individual components if needed\n     * @returnas {void}\n     */\n    beforeNextSection: function beforeNextSection() {},\n\n    /**\n     * @function\n     * @name checkSectionValidation\n     * @description Checks if all fields in section have been validated (`canSubmitSection`)\n     * @returns {void}\n     */\n    checkSectionValidation: function checkSectionValidation() {\n      var _this4 = this;\n\n      this.$nextTick(function () {\n        // validate fields that have a matching field that ends with _confirmation\n        if (_this4.sectionFields && _this4.hasConfirmFields) {\n          _this4.sectionFieldKeys.forEach(function (key) {\n            if (!key.endsWith('_confirmation')) {\n              return;\n            }\n\n            var baseField = _this4.findField(key.replace('_confirmation', ''));\n\n            if (!baseField) {\n              return;\n            }\n\n            var targetField = _this4.findField(key);\n\n            if (baseField.value !== targetField.value) {\n              targetField.setError(\"Must match \".concat(baseField.humanName));\n            }\n          });\n        } // validate fields from matchingFields via key/value pairs\n\n\n        if (_this4.sectionFields && _this4.hasMatchingFields) {\n          Object.keys(_this4.matchingFields).forEach(function (key) {\n            var baseField = _this4.findField(key);\n\n            var targetField = _this4.findField(_this4.matchingFields[key]);\n\n            if (baseField.value !== targetField.value) {\n              targetField.setError(\"Must match \".concat(baseField.humanName));\n            }\n          });\n        }\n\n        _this4.sectionValid = _this4.canSubmitSection;\n      });\n    },\n\n    /**\n     * @function\n     * @name setSectionFields\n     * @returns {array} Fields within section\n     */\n    setSectionFields: function setSectionFields() {\n      var sectionFields = [];\n      this.sections.forEach(function (section) {\n        var fields = (0, _utilities.findComponents)(section, [], 'DoeInput');\n        fields = (0, _utilities.findComponents)(section, fields, 'DoeSelect');\n        fields = (0, _utilities.findComponents)(section, fields, 'DoeRadio');\n        fields = (0, _utilities.findComponents)(section, fields, 'DoeCheckbox');\n        fields = (0, _utilities.findComponents)(section, fields, 'DoeDatePicker');\n        fields = (0, _utilities.findComponents)(section, fields, 'DoeFileInput');\n        sectionFields.push(fields);\n      });\n      return sectionFields;\n    },\n\n    /**\n     * @function\n     * @name goToSection\n     * @description Sets section based on `this.currentSection`\n     * @returns {void}\n     */\n    goToSection: function goToSection() {\n      var _this5 = this;\n\n      this.sections.forEach(function (section) {\n        section.isActive = false;\n      });\n      this.sections[this.currentSection].isActive = true;\n      this.$nextTick(function () {\n        if (!_this5.sectionFields[0].disabled) {\n          _this5.sectionFields[0].setFocus();\n        }\n      });\n    },\n\n    /**\n     * @function\n     * @name handlePrevSection\n     * @description Decreases `this.currentSection` and calls methods to change sections\n     * @returns {void}\n     */\n    handlePrevSection: function handlePrevSection() {\n      this.currentSection--;\n      this.goToSection();\n      this.handleSectionChange();\n      this.handleScrollTop();\n    },\n\n    /**\n     * @function\n     * @name handleNextSection\n     * @description Increases `this.currentSection` and calls methods to change sections\n     * @returns {void}\n     */\n    handleNextSection: function handleNextSection() {\n      this.beforeNextSection();\n      this.currentSection++;\n      this.goToSection();\n      this.handleSectionChange();\n      this.handleScrollTop();\n    },\n\n    /**\n     * @function\n     * @name handleScrollTop\n     * @description Scrolls to top of window\n     * @returns {void}\n     */\n    handleScrollTop: function handleScrollTop() {\n      window.scrollTo(0, 0);\n    },\n\n    /**\n     * @function\n     * @name handleSectionChange\n     * @description Validates fields in current section\n     * @returns {void}\n     */\n    handleSectionChange: function handleSectionChange() {\n      this.sectionValid = this.sectionRequiredFieldsCount === this.sectionValidatedFieldsCount;\n    },\n\n    /**\n     * @function\n     * @name handleValueChanged\n     * @description Listener callback for when child components values change\n     * @returns {void}\n     */\n    handleValueChanged: function handleValueChanged() {\n      this.checkValidation();\n      this.checkSectionValidation();\n    }\n  }\n};\nexports.formSectionProps = formSectionProps;\n\n//# sourceMappingURL=forms.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/@bit/doeanderson.components.core.forms/dist/forms.js\n");

/***/ }),

/***/ "./node_modules/@bit/doeanderson.components.core.forms/dist/utilities.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/@bit/doeanderson.components.core.forms/dist/utilities.js ***!
  \*******************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("/* THIS IS A BIT-AUTO-GENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY. */\n\nObject.defineProperty(exports, \"__esModule\", { value: true });\nmodule.exports = __webpack_require__(/*! @bit/doeanderson.components.core.utilities */ \"./node_modules/@bit/doeanderson.components.core.utilities/dist/utilities.js\");//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQGJpdC9kb2VhbmRlcnNvbi5jb21wb25lbnRzLmNvcmUuZm9ybXMvZGlzdC91dGlsaXRpZXMuanMuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQGJpdC9kb2VhbmRlcnNvbi5jb21wb25lbnRzLmNvcmUuZm9ybXMvZGlzdC91dGlsaXRpZXMuanM/ZGJkMSJdLCJzb3VyY2VzQ29udGVudCI6WyIvKiBUSElTIElTIEEgQklULUFVVE8tR0VORVJBVEVEIEZJTEUuIERPIE5PVCBFRElUIFRISVMgRklMRSBESVJFQ1RMWS4gKi9cblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xubW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCdAYml0L2RvZWFuZGVyc29uLmNvbXBvbmVudHMuY29yZS51dGlsaXRpZXMnKTsiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/@bit/doeanderson.components.core.forms/dist/utilities.js\n");

/***/ })

}]);